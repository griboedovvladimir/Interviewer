// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`>>>Interview component render the connected(SMART) Interview  component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(Interview)>
        <Interview
          action={
            Object {
              "getDirtyQuestion": [Function],
              "getInterview": [Function],
              "getQuestion": [Function],
            }
          }
          interview={Array []}
          match={
            Object {
              "params": Object {
                "id": "15",
              },
            }
          }
          question={
            Object {
              "question_id": "15",
              "ratting": "7",
              "source": "text",
              "subtopic_id": "2",
              "text": "text",
            }
          }
        >
          <h2>
            ...loading
          </h2>
        </Interview>
      </Connect(Interview)>
    </Router>
  </BrowserRouter>
</Provider>
`;

exports[`>>>Interview component with interview state === [] render the connected(SMART) Interview  component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(Interview)>
        <Interview
          action={
            Object {
              "getDirtyQuestion": [Function],
              "getInterview": [Function],
              "getQuestion": [Function],
            }
          }
          interview={Array []}
          match={
            Object {
              "params": Object {
                "id": "15",
              },
            }
          }
          question={
            Object {
              "question_id": "15",
              "ratting": "7",
              "source": "text",
              "subtopic_id": "2",
              "text": "text",
            }
          }
        >
          <h2>
            ...loading
          </h2>
        </Interview>
      </Connect(Interview)>
    </Router>
  </BrowserRouter>
</Provider>
`;
